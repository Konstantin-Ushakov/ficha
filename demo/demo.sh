#!/bin/bash

# –î–µ–º–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è FiCha (Feature Coverage Analyzer)
# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –¥–µ–º–æ-–ø—Ä–∏–º–µ—Ä–∞—Ö

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ FiCha (Feature Coverage Analyzer)"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "../analyzer.py" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ tests/analyze/demo/"
    echo "   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–º–æ-—Ñ–∞–π–ª–æ–≤
if [ ! -f "example/0_demo-fail.md" ] || [ ! -f "example/0_demo-fail.feature" ] || [ ! -f "example/0_demo-success.md" ] || [ ! -f "example/0_demo-success.feature" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –î–µ–º–æ-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ example/"
    exit 1
fi

echo "‚úÖ –î–µ–º–æ-—Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
echo "üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:"
echo "   - 0_demo-fail.md ‚Üî 0_demo-fail.feature (–ø—Ä–∏–º–µ—Ä —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏)"
echo "   - 0_demo-success.md ‚Üî 0_demo-success.feature (–ø—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–π —Ñ–∏—á–∏)"
echo ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ env.demo
echo "üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ env.demo..."
export $(grep -v '^#' env.demo | xargs)

echo "üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
echo "   USER_FEATURES_PATH: ${USER_FEATURES_PATH}"
echo "   FEATURE_TESTS_PATH: ${FEATURE_TESTS_PATH}"
echo "   MODEL_PATH: ${MODEL_PATH}"
echo "   TEST_CATEGORY: ${TEST_CATEGORY}"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π Docker Compose —Å –¥–µ–º–æ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
echo "üîç –ó–∞–ø—É—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."
echo "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ tests/analyze/docker-compose.yml —Å –¥–µ–º–æ-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ."
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ env.demo
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É tests/analyze –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ compose
cd ..

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Docker Compose
export USER_FEATURES_PATH="${USER_FEATURES_PATH}"
export FEATURE_TESTS_PATH="${FEATURE_TESTS_PATH}"
export MODEL_PATH="${MODEL_PATH}"
export TEST_CATEGORY="${TEST_CATEGORY}"
export CI=true

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è Docker Compose:"
echo "   USER_FEATURES_PATH: ${USER_FEATURES_PATH}"
echo "   FEATURE_TESTS_PATH: ${FEATURE_TESTS_PATH}"
echo "   MODEL_PATH: ${MODEL_PATH}"
echo ""

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ tests/analyze/docker-compose.yml
docker compose -f docker-compose.yml build semantic-analyzer
docker compose -f docker-compose.yml run --rm \
    -e TEST_CATEGORY="${TEST_CATEGORY}" \
    -e CI=true \
    semantic-analyzer

echo ""
echo "‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–≤–µ–¥–µ–Ω—ã –≤—ã—à–µ"
echo ""
echo "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–≤–æ–∏—Ö —Ñ–∏—á–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ (–Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ tests/analyze):"
echo "   TEST_CATEGORY=<–∫–∞—Ç–µ–≥–æ—Ä–∏—è_–∏–ª–∏_till-X> docker compose -f docker-compose.yml run --rm semantic-analyzer"
